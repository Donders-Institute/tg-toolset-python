#!/bin/bash
#
# universal shell script to start a specific version of matlab
# the basename is: matlabXX
#     XX = the version of matlab, e.g. 70
#     -noX11tunnel = optional - try to circumvent ssh tunneling of X11 by
#             using the IP number of the client
#
# the basename of this script is a link to the real script
# the basename is used to figure out which version of matlab to start
#
# prereq: matlab is installed at standard location:
#            on linux at /opt
#            on solaris at /usr/local
#         matlab is installed in the default directory matlab{major version}{minor version}
#         patchlevels are NOT added
#         eg. matlab 7.0.1 on linux /opt/matlab70
#
# this script depends on the "cluster-matlab" script to determine the number of
# matlab sessions running on each node and by each user
#
# 03nov2011 - roboos: added TORQUEOPTIONS for single thread and nodisplay
# 10mar2012 - roboos: fixed a problem in the PBS_ENVIRONMENT
# 15nov2012 - roboos: allow interactive matlabs on mentat001 and 002 through
#                     torque, ask for mem and walltime
# 07dec2012 - roboos: added xhost+ 
# 11dec2012 - integrated -noX11tunnel version into main if loop, added support
#             for -local version
# 07mrt2013 - rendbru: added -r matlab input argument with torque execution
# 03may2013 - edwger: added support for mentat003 as torque frontend
# 13nov2013 - edwger: added functionality (function rem_walltime) to calculate
#                     the default walltime until 8pm between 8am and 8pm with a
#                     minimum of 4 hours
# 22nov2013 - edwger: stripped leading zeros from mins_now for minutes
#                     remain calculation (function rem_walltime)
# 25nov2013 - edwger: with the above strip of leading zeros the mins_now var
#                     was empty if mins_now was 00. The var mins_now is now
#                     checked if empty and changed to 0 if so. (function
#                     rem_walltime)
# 25nov2013 - edwger: due to the above changes remaining minutes could result
#                     to 60. Now mins_remain is checked and changed to 00 if
#                     mins_remain is 60 and the var hrs_remain is increased
#                     by 1. (function rem_walltime)
# 17sep2014 - honlee: integration with Environment Modules
#                     1. user login
#                     2. % module load matlab --> here an alias called 'matlab' is created to refer to this script  
#                     3. % matlab

# load helper functions 
source $CLUSTER_UTIL_ROOT/share/matlabXX-lib.sh

# use the short hostname
HOSTNAME=`hostname -s`

# get matlab module
MATLAB_MODULE=`getLoadedMatlabModule`

##############################################################################
# determine the options for Torque
# MATLAB uses either a single thread  or all threads in a machine
# Torque expects MATLAB to use a single thread, hence this option
##############################################################################
if [ -z "$PBS_O_QUEUE" ]; then
    # the following section applies to all normal mentats, including 001, 002 and
    # 003. It does not apply to the torque execution hosts

    TORQUEREQUEST=`basename $0 | grep torque`
    LOCALREQUEST=`basename $0 | grep local`
    NOX11TUNNEL=`basename $0 | grep noX11tunnel`

    HOSTNAME=`hostname -s`
 
    if [ "$HOSTNAME" == "mentat001" -a -n "$LOCALREQUEST" ]; then
        echo You are not permitted to start MATLAB directly on the login nodes mentat001, 002 or 003
        exit 1
    elif [ "$HOSTNAME" == "mentat002" -a -n "$LOCALREQUEST" ]; then
        echo You are not permitted to start MATLAB directly on the login nodes mentat001, 002 or 003
        exit 1
    elif [ "$HOSTNAME" == "mentat003" -a -n "$LOCALREQUEST" ]; then
        echo You are not permitted to start MATLAB directly on the login nodes mentat001, 002 or 003
        exit 1
    elif [ "$HOSTNAME" == "mentat001" -o "$HOSTNAME" == "mentat002" -o "$HOSTNAME" == "mentat003" -o -n "$TORQUEREQUEST" ]; then
        # The following section applies only mentats001, 002 and 003 and initiates
        # a torque/maui-job started on one of the torque execution hosts
    
        # Call the rem_walltime function and use the var remaining_walltime below in the
        # dialog to the user.
        remaining_walltime=`rem_walltime`
    
        if [ -z $DISPLAY ]; then
            # Exit with error-message if display variable is not set
            echo " "
            echo "No DISPLAY variable set!"
            echo "A DISPLAY setting is required to run Matlab."
            echo " "
            echo "You can try to open a new terminal and check your"
            echo "DISPLAY from the command line with:"
            echo "$ echo \$DISPLAY"
            echo " "
            echo "For more info see:"
            echo "https://intranet.donders.ru.nl/index.php?id=3832"
            echo " "
            exit 0
        fi
    
        # Get Torque arguments -r, if incorrect exit
        MATLAB_ARGUMENTS=""
        if [ $# -gt 0 ]; then
            if [[ $1 == -* ]]; then        
                while getopts r: option; do
                    case "${option}" in
                        r) MATLAB_ARGUMENTS="-r ${OPTARG}";;
                        ?) echo "Unexpected matlab input argument, only -r option is allowed."; exit 1;;
                    esac
                done
            else 
                echo "Unexpected matlab input argument, only -r option is allowed."
                exit 1
            fi
        fi

        echo " "
        echo "Scheduling an interactive MATLAB session for execution on torque:"
        echo " "

        hrs_now=$(date +"%k:%M" | awk -F : '{ print $1 }')

        if [ $hrs_now -lt 16 ] && [ $hrs_now -ge 8 ]; then
            echo "Default your job runs until 8pm."
            echo "Specify the required time as HH:MM:SS (current default $remaining_walltime)"
        else
            echo "Specify the required time as HH:MM:SS (default $remaining_walltime)"
        fi
 
        echo -n "Enter time (HH:MM:SS) or press enter for default: "
        read walltime
        if [ -z "$walltime" ]; then
            walltime=$remaining_walltime
        fi
 
        echo " "
        echo "Specify the required memory as XXgb (default 3gb)"
        echo -n "Enter memory (XXgb) or press enter for default: "
        read mem
 
        if [ -z "$mem" ]; then
            mem=3gb
        fi
 
        while ! [[ $(echo $mem | tail -3c | tr '[:upper:]' '[:lower:]') == "gb" ]]; do
            echo " "
            echo -n "Memory value needs to be specified with required "
            echo -e "\033[1mGB/gb\033[0m!"
            echo -n "Specify the required memory as XX"
            echo -ne "\033[1m\033[5mgb\033[0m!"
            echo " (default 3gb)"
            echo -n "Enter memory (XXgb) or press enter for default: "
            read mem;
            if [ -z "$mem" ]; then
                mem=3gb
            fi
        done
 
        if [ ${DISPLAY:0:1} == ":" ]; then
            # the display variable is formatted as :1.0, whereas the X11 output should go to mentat001:1.0
            DISPLAY=$HOSTNAME$DISPLAY
        fi
 
        # ensure that the display can be forwarded
        echo
        xhost +
 
        echo
        echo Requesting interactive MATLAB session on a suitable torque execution host using
        echo "source $DCCN_MOD_DIR/setup.sh; module load $MATLAB_MODULE; matlab $MATLAB_ARGUMENTS -desktop -singleCompThread -display $DISPLAY"
        echo
        # NOTE: $MATLAB_BIN should be a remote environment; therefore use "\$MATLAB_BIN" rather than "$MATLAB_BIN" in the Torque script
        echo "source $DCCN_MOD_DIR/setup.sh; module load $MATLAB_MODULE; \$MATLAB_BIN $MATLAB_ARGUMENTS -desktop -singleCompThread -display $DISPLAY" | qsub -l walltime=$walltime,mem=$mem,nodes=1 -q interactive
        echo
        exit 0

    elif [ -n "$NOX11TUNNEL" ]; then

        # try to circumvent the tunneling of X11 over ssh
 
        if  [ "XX$SSH_CLIENT" = "XX" ]; then
            echo "Unable to detect ssh client origin"
            exit 1
        else
            IP=`echo "$SSH_CLIENT" | cut -d " " -f 1`
            DISPLAYOPTIONS=" -display $IP:0 "
            TORQUEOPTIONS=""
        fi

    else
        # nothing special was requested
        TORQUEOPTIONS=""
        DISPLAYOPTIONS=""
    fi

elif [ "$PBS_ENVIRONMENT" = "PBS_BATCH" ]; then
    TORQUEOPTIONS=" -singleCompThread -nodisplay "

elif [ "$PBS_ENVIRONMENT" = "PBS_INTERACTIVE" ]; then
    TORQUEOPTIONS=" -singleCompThread "
fi

##############################################################################
# start the desired matlab version
##############################################################################

OTHEROPTIONS=$*

# test whether the user is allowed to start another matlab session
export LMSTAT="$CLUSTER_UTIL_ROOT/bin/lmstat -f MATLAB"

# this line can be commented out to quickly disable the test completely
$CLUSTER_UTIL_ROOT/bin/matlabXX-check || exit 1

echo "Starting $MATLAB_MODULE"

## GOOD: it doesn't matter if same module is loaded twice, it is handled properly
module load $MATLAB_MODULE

echo Executing $MATLAB_BIN $TORQUEOPTIONS $DISPLAYOPTIONS $OTHEROPTIONS
exec $MATLAB_BIN $TORQUEOPTIONS $DISPLAYOPTIONS $OTHEROPTIONS
