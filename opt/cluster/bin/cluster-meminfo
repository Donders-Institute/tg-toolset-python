#!/bin/bash
#
# cluster-meminfo
# Zenity progress bar to determine the max memory usage during 
# a running, interactive, torque/maui job
# 
# 28-11-13: edwger
# 
# Function meminfo "needs the requested amount of memory in bytes" argument.
# example: 
# $ meminfo 512000000
#
# Because of the torque housekeeping the info is updated 
# aproximately once every 50 seconds
#
# On torque exec-hosts with slow CPU and walltime-multiplier the given
# walltime will be calculated with the given walltime divided with the 
# found walltime-multiplier: secs=$(echo "$secs / $wtmp" | bc)
#

function bytes {
   # Stolen from Robert's script cluster-jobinfo
   # convert GB, MB and KB to bytes using the trailing indicator
   if [ -n "$1" ]; then
      echo $1 | awk '/[gG][bB]$/ {sub("[gG][bB]", "", $1); print 1024*1024*1024*$1}; /[mM][bB]$/ {sub("[mM][bB]", "", $1); print 1024*1024*$1}; /[kG][bB]$/ {sub("[kK][bB]", "", $1); print 1024*$1}'
   else
      echo 0
   fi
   }

function kilobytes {
   # convert bytes to KB
   if [ -n "$1" ]; then
      echo "$1/(1024)" | bc
   else
      echo 0
   fi
   }

function megabytes {
   # convert bytes to MB
   if [ -n "$1" ]; then
      echo "$1/(1024*1024)" | bc
   else
      echo 0
   fi
   }

function meminfo(){
      (
      # Use given argument as requested memory for this job for calculations
      requested=$@
      START=$requested
      secs=$wt
      while [ $secs -gt "0" ]
      do
         # Get used mem from qstat -f
         raw_used=$(qstat -f $PBS_JOBID | grep "resources_used.mem = " | awk -F" " '{ print $3 }')
         # Convert to bytes
         used=`bytes $raw_used`
         # Zenity requirements go here
         PERCENT=$((100*used/START))
         echo "#Max memory used:" `megabytes $used`" MB of requested" `megabytes $requested`" MB"
         echo $PERCENT ; sleep 15 ; ((secs-=15))
      done
      ) |
      zenity $DISPLAYARG --title "Memory usage" \
        --progress \
        --percentage=0 \
        --text="" \
        --width=400 \
        --height=100 \
        --auto-close &

      # Here the meminfo() function ends
      }

# Start main program
export DISPLAYARG=$@
export NO_AT_BRIDGE=1

# Check the Torque PBS requirements and determine walltime and requested mem..
if [ "$PBS_ENVIRONMENT" == "PBS_BATCH" -o "$PBS_ENVIRONMENT" == "PBS_INTERACTIVE" -a "$PBS_QUEUE" == "interactive" ]
then 
   # Find out the requested memory specification and convert to bytes
   export raw_reqmem=`qstat -f $PBS_JOBID | grep -i Resource_List.mem | cut -d = -f 2`
   export reqmem=`bytes $raw_reqmem`
 
   # Find out the requested walltime argument (to run during running job)
   export wt=$(qstat -f $PBS_JOBID | grep "Walltime.Remaining = " | awk -F" " '{ print $3 }')

   # Check for zenity GTK+ dialogs functionality
   if [ -e /usr/bin/zenity ]
   then
      # Check for walltime multiplier
      if cluster-torqueconfig | grep -q "NODECFG\[${HOSTNAME%%.*}\]"
      then
         # Find multiplier info and calculate the new walltime
         wtmp=$(cluster-torqueconfig | grep "NODECFG\[${HOSTNAME%%.*}\]" | awk '{match($0,"([0-9]+.*SPEED=)(.*)",a);print substr(a[2],0,4)}')
	 #echo "Multiplier is: $wtmp"
	 old_wt=$wt
         #echo "Old walltime was: $(echo "obase=60;$old_wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S.
         wt=$(echo "$wt / $wtmp" | bc)
	 #echo "New walltime is: $(echo "obase=60;$wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S."

	 # Supply some extra info to user (info not relevant for meminfo)...
	 #echo "Slow CPU detected!"
	 #echo "Walltime adjusted to: $(echo "obase=60;$old_wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g') devided by $wtmp."
         #echo "New Walltime: $(echo "obase=60;$wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S.
      fi

      #echo $wt
      echo "Memory info started (delayed updates!)..."
      # Here goes the actual Zenity used memory-bar function
      meminfo $reqmem
   fi
fi

#if [ "$?" = -1 ] ; then
#   zenity --error \
#   --text="Update canceled."
#fi

