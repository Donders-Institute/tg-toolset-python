#!/bin/bash
#
# cluster-walltimeinfo
# Zenity progress bar menu with Torque Walltime Countdown
# 
# 10-11-13: edwger
# 
# Function progress "needs number of seconds" argument.
# example: 
#
# On torque exec-hosts with slow CPU and walltime-multiplier the given
# walltime will be calculated with the given walltime divided with the 
# found walltime-multiplier: secs=$(echo "$secs / $wtmp" | bc)
#

function progress(){
      (
      #IFS=:
      #set -- $*
      #secs=$(( ${1#0} * 3600 + ${2#0} * 60 + ${3#0} ))

      # Number of seconds is the supplied progress walltime argument: wt
      secs=$@
      printf "\r%02d:%02d:%02d" $((secs/3600)) $(( (secs/60)%60)) $((secs%60))

      START=$secs

      until [ "$secs" -eq "0" ]
      do
        ((secs-=1))
	# Send notifies the last 10, 5 and 1 minute(s) (600, 300 or 60 secs)
	if [ "$secs" -eq "600" -a -n "$DISPLAY" ]
	then
	   notify-send -i /usr/share/icons/hicolor/48x48/apps/kalarm.png -u critical -t 5000 "# Job ends in ~10 minutes! #" &
	fi
	if [ "$secs" -eq "300" -a -n "$DISPLAY" ]
	then
	   notify-send -i /usr/share/icons/hicolor/48x48/apps/kalarm.png -u critical -t 5000 "# Job ends in ~5 minutes! #" &
	fi
	if [ "$secs" -eq "60" -a -n "$DISPLAY" ]
	then
	   notify-send -i /usr/share/icons/hicolor/48x48/apps/kalarm.png -u critical -t 60000 "# Job ends in ~1 minute! #" &
	fi

	# Zenity requirements go here
        PERCENT=$((100-100*secs/START))
        echo "#Time remaining $(echo "obase=60;$secs" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S.
        echo $PERCENT
        sleep 1
      done
      ) |
      zenity $DISPLAYARG --title "Walltime countdown" \
        --progress \
        --percentage=0 \
        --text="" \
        --width=400 \
        --height=100 \
        --auto-close &

# Here the progress() function ends
}

# Start main program
export DISPLAYARG=$@

# Check the Torque PBS requirements and determine walltime...
if [ "$PBS_ENVIRONMENT" == "PBS_BATCH" -o "$PBS_ENVIRONMENT" == "PBS_INTERACTIVE" -a "$PBS_QUEUE" == "interactive" ]
then 
# A few different ways the determine the given walltime. We use the latter
#   export wt=$(qstat -f $PBS_JOBID | grep "Resource_List.walltime" | awk '{match($0,"([0-9]+.*walltime= )(.*)",a);print substr(a[2],0,8)}')
#   export wt=$(qstat -f $PBS_JOBID | grep "Resource_List.walltime" | awk '{print substr($0,30,8)}')
   export wt=$(qstat -f $PBS_JOBID | grep "Walltime.Remaining = " | awk -F" " '{ print $3 }')

   # Check for zenity GTK+ dialogs functionality
   if [ -e /usr/bin/zenity ]
   then
      # Check for walltime multiplier
      if cluster-torqueconfig | grep -q "NODECFG\[${HOSTNAME##.*}\]"
      then
	 # Find multiplier info and calculate the new walltime
         wtmp=$(cluster-torqueconfig | grep "NODECFG\[${HOSTNAME##.*}\]" | awk '{match($0,"([0-9]+.*SPEED=)(.*)",a);print substr(a[2],0,4)}')
	 #echo "Multiplier is: $wtmp"
	 old_wt=$wt
         #echo "Old walltime was: $(echo "obase=60;$old_wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S.
         wt=$(echo "$wt / $wtmp" | bc)
	 #echo "New walltime is: $(echo "obase=60;$wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S."

	 # Supply some extra info to user...
	 echo "Slow CPU detected!"
	 echo "Walltime adjusted to: $(echo "obase=60;$old_wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g') devided by $wtmp."
         echo "New Walltime: $(echo "obase=60;$wt" | bc | sed 's/^[ ]//' | sed 's/ /:/g')"  # Convert to H:M:S.
      fi

      # Here goes the actual Zenity progress-bar function
      progress $wt

      # Supply some extra info after the Walltime countdown progress-bar start..
      echo "Walltime expiration countdown started..."
   fi
fi

#if [ "$?" = -1 ] ; then
#   zenity --error \
#   --text="Update canceled."
#fi
