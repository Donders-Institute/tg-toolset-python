#!/bin/bash
# vnc helper script to manage vnc servers
# todo: check for ssh keys and give info message if keys are not exchanged yet
# changelog
# 24aug06 - bradaa
# added Collaborate and Disconnect options
# added default screenresolution of a MacBook
# list of vnc servers is now sorted
#
# 13sep06 - bradaa
# added "cd -L" to all the xstartup scripts. This will make sure
# that the user ends up in ~ instead of /mnt/homeX/username
#
# 13aug07 - bradaa
# added question for Windows start menu compensation
#
# 16nov10 - bradaa
# added 2048 x 1152 screen resolution

function get_script_dir() {
    ## resolve the base directory of this executable
    local SOURCE=$1
    while [ -h "$SOURCE" ]; do
        # resolve $SOURCE until the file is no longer a symlink
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$(readlink "$SOURCE")"
 
        # if $SOURCE was a relative symlink,
        # we need to resolve it relative to the path
        # where the symlink file was located

        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    done
    
    echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}

function quit 
{
	if [ -e "$VNCINFO" ]
	then
		rm $VNCINFO
	fi

	if [ -e "$TMPFILE" ]
	then
		rm $TMPFILE
	fi

	if [ -e "$THISHOST" ]
	then
		rm $THISHOST
	fi
	echo Bye!
	exit 0
}


function novncservers
{
	dialog 	--backtitle "vncmanager" \
		--title "overview" \
		--msgbox "No running VNC servers found" 15 65
}


function novalidtorquevnc
{
	dialog 	--backtitle "vncmanager" \
		--title "VNC session not allowed" \
		--msgbox "Failed to run a vncserver on this host. If torque is used with an interactive session please specify the vgl-queue.

Example:
$ qsub -I -X -l walltime=03:00:00,mem=1gb -q vgl

Setting up or listing a VNC-server session failed because $MELDING" 15 65 
	return 0
}


function chktorque
{
	# check for valid Torque Executionhosts "vgl" propertie
	qmgr -z -c "list node ${HOSTNAME##.*}" | grep -v grep | grep -q vgl
	STATUS=$?
	if [ $STATUS == 0 ] ; then
		TORQUEVGL=true
	else
		TORQUEVGL=false
	fi

	# check for valid Torque PBS environment variables
	if [ "$PBS_ENVIRONMENT" == "PBS_INTERACTIVE" -a "$PBS_QUEUE" == "vgl" ]; then
		TORQUEENV=true
	else
		TORQUEENV=false
	fi
	
	# check for valid interactive torque but INVALID queue
	if [ "$PBS_ENVIRONMENT" == "PBS_INTERACTIVE" -a "$PBS_QUEUE" == "interactive" ]; then
		TORQUEINT=true
	else
		TORQUEINT=false	
	fi

        # check for torque exec node dccn-c007 during toolkits/tutorials
        if [ "${HOSTNAME%%.*}" == "dccn-c007" ]; then
                TORQUEVGL=true
                TORQUEENV=true
                TORQUEINT=true
        fi

	# Valid torque vgl system if TORQUEVGL, TORQUEENV
	if ( $TORQUEVGL && $TORQUEENV ) ; then
		VALIDTORQUE=true
		echo "Torquevgl is allowed"
		MELDING="Use your preferred VNC-viewer (Turbo VNC viewer or Tiger VNC viewer) to connect to this host and display number during this running torque-session."
	else
		VALIDTORQUE=false
	fi

	if ( ! $VALIDTORQUE && $TORQUEVGL && ! $TORQUEENV ) ; then
		#VALIDTORQUE=false
		echo "Torque environment VARS are not present..."
		MELDING="one of the torque environment variables did not match. You need both PBS_ENVIRONMENT=PBS_INTERACTIVE and PBS_QUEUE=vgl." 
		novalidtorquevnc
		quit
	fi

	if ( ! $VALIDTORQUE && ! $TORQUEVGL && $TORQUEENV ) ; then
		#VALIDTORQUE=false
		echo "Exec host has no vgl-property..."
		MELDING="this torque execution host has no vgl property. Make sure your job is send to the vgl-queue."
		novalidtorquevnc
		quit
	fi

	if ( ! $VALIDTORQUE && ! $TORQUEVGL && $TORQUEINT ) ; then
		#VALIDTORQUE=false
		echo "Exec host is torque AND job is interactive but no vgl-property..."
		MELDING="this torque execution host has no vgl property. Make sure your job is send to the vgl-queue."
		novalidtorquevnc
		quit
	fi

	if ( ! $VALIDTORQUE && ! $TORQUEENV && $TORQUEINT ) ; then
		#VALIDTORQUE=false
		echo "Exec host is torque, has vgl-property but no vglqueue or pbs-interactive..."
		MELDING="this interactive job is not running in the VGL queue. Make sure your job is send to the vgl-queue."
		novalidtorquevnc
		quit
	fi

	if ( ! $VALIDTORQUE && ! $TORQUEVGL && ! $TORQUEENV && ! $TORQUEINT ) ; then
		#VALIDTORQUE=false
		echo "All torque verifications failed (Interactive/vgl-queue/vgl property)..."
		MELDING="the torque environment variables and execution host vgl property are missing. This MUST be a common mentat!!!"
		# Run the vncmanager as on a common mentat/frontend node
	fi
}


function searching
{
	# show waiting message
	dialog 	--backtitle "vncmanager" \
		--title "wait..." \
		--infobox "Searching for running VNC servers" 15 65
}


function updatevncinfo
{
	searching
	#chktorque
	vncinfo | sort > $VNCINFO
	if ( $VALIDTORQUE ) ; then
		ps hu -C Xvnc | grep $USER | awk '{ print hostname $12 }' hostname=$HOSTNAME | sort >> $VNCINFO
	fi
	if [ ! -s $VNCINFO ]
	then
		novncservers
		return 1
	fi
}


function vncinfodialog
{
	updatevncinfo
	if [ ! "$?" -eq "0" ]
	then
		# no servers found, go back to main menu
		return 0
	fi

	dialog 	--backtitle "vncmanager" \
		--title "overview" \
		--msgbox "$(echo 'You have the following VNC servers running:'; cat $VNCINFO)" 15 65
		#--msgbox "$(echo 'You have the following VNC servers running:' | cat - $VNCINFO)"  15 65

}


function disconnectvncviewers
{
        # takes "hostname:displaynumber" as argument
        VNCSERVER=${1%%.*}
        VNCDISPLAY=${1##*:}
        if ( $VALIDTORQUE ) ; then
                # host is torque execution node in queue vgl and has
                # property vgl. Start vnc-server on local system....
                "PATH=$PATH:/usr/X11R6/bin; vncconfig -display ${1}.0  -disconnect"
        else
                # host is a classic mentat system. First ssh to this system
                # and then start the vncserver over there....

		ssh     -X \
		$VNCSERVER \
                "PATH=$PATH:/usr/X11R6/bin; vncconfig -display ${1}.0  -disconnect"
	fi
}


function killvncserver
{
	# takes "hostname:displaynumber" as argument
	VNCSERVER=${1%%.*}
	VNCDISPLAY=${1##*:}
	echo $VNCSERVER | grep -iq "dccn-c3\|mentattst"
	#if [ $VNCSERVER == "mentattst" ]; then
	if ( $VALIDTORQUE ) ; then
                # host is torque execution node in queue vgl and has
                # property vgl. Start vnc-server on local system....
		PATH=$PATH:/usr/X11R6/bin; /usr/bin/vncserver -kill :$VNCDISPLAY
	else
                # host is a classic mentat system. First ssh to this system
                # and then start the vncserver over there....
		ssh 	$VNCSERVER \
		"PATH=$PATH://usr/X11R6/bin; vncserver -kill :$VNCDISPLAY"
	fi
}


function disconnectfromlist
{
		
        # loop until the user cancels
        while true
        do
                updatevncinfo
                if [ ! "$?" -eq "0" ]
                then
                        # no servers found, go back to main menu
                        return 0
                fi
                > $TMPFILE
                exec 3<>$TMPFILE
                # show dialog
                dialog  --backtitle "vncmanager"    \
                        --title "disconnect vnc viewers" \
                        --output-fd 3 \
                        --menu "Select the session you want to disconnect all VNC viewers from:" \
                        15 65 6 \
                        $(awk '{ print NR " " $1 }' < $VNCINFO)

                # test if user canceled
                if [ ! "$?" -eq "0" ]
                then
                        return 0
                fi
                exec 3>&-
                answer=$(cat $TMPFILE)

                # extract relevant information for next action
                SERVERTOKILL=$(sed "$answer!d" $VNCINFO)

                # ask for confirmation
                > $TMPFILE
                exec 3<>$TMPFILE
                dialog  --backtitle "vncmanager" \
			--title "disconnect vnc viewers" \
                        --defaultno   \
                        --output-fd 3 \
                        --yesno "Are you sure you want to disconnect all VNC viewers that are connected to $SERVERTOKILL? (note that your current viewer connection might be disconnected as well, but the VNC server is will keep on running)" 9 55
                # test if user answered 'Yes'
                if [ "$?" -eq "0" ]
                then
                        # disconnect vncviewers
                        disconnectvncviewers $SERVERTOKILL
                fi
        done
}


function killfromlist
{
	# loop until the user cancels or when there are no vnc servers anymore
	while true 
	do
		updatevncinfo
		if [ ! "$?" -eq "0" ]
		then
			# no servers found, go back to main menu
			return 0
		fi
		> $TMPFILE
	        exec 3<>$TMPFILE
		# show dialog
		dialog 	--backtitle "vncmanager"    \
			--title "stop vnc servers" \
			--output-fd 3 \
			--menu "Select the VNC server instance you want to\
			stop:" 15 65 6 \
			$(awk '{ print NR " " $1 }' < $VNCINFO)
	
		# test if user canceled	
		if [ ! "$?" -eq "0" ]
		then
			return 0
		fi
		exec 3>&-
		answer=$(cat $TMPFILE)

		# extract relevant information for next action
		SERVERTOKILL=$(sed "$answer!d" $VNCINFO)
		
		# ask for confirmation
		> $TMPFILE
		exec 3<>$TMPFILE
		dialog 	--backtitle "vncmanager" \
			--defaultno   \
			--output-fd 3 \
			--yesno "Are you sure you want to stop the VNC server\
				$SERVERTOKILL?" 8 55
		# test if user answered 'Yes'
		if [ "$?" -eq "0" ]
		then
			# kill the remote vnc server
			killvncserver $SERVERTOKILL
		fi
	done
}


function askhost
{
	TMPHOSTFILE=`mktemp`
	
	# Is host torque execution node?
	#chktorque
	if ( $VALIDTORQUE ) ; then
		# host is torque execution node in queue vgl and has property vgl
		echo ${HOSTNAME%%.*} > $TMPHOSTFILE
	else
		# this host must be a normal mentat
		#echo ${HOSTNAME%%.*} > $TMPHOSTFILE
		# ENCOURAGE USE OF MENTAT001 AND PUT MENTAT001 ON TOP!!!! (NOT CURRENT HOSTNAME)
		# REMOVE COMMENT ABOVE TO MAKE UNDONE!!!!
		echo "mentat002" > $TMPHOSTFILE
		cat $CLUSTER_UTIL_ROOT/etc/machines.mentat | grep -v mentat00[4-9] | grep -v dccn-c >> $TMPHOSTFILE
	
		# exclude more restricted mentats if necessary
		# cat /opt/cluster/machines | grep -v mentat00[4-9] | grep -v mentat31[5-9] | grep -v mentat32[0-2] >> $TMPHOSTFILE
	fi

	# clear temporary file
	>$TMPFILE
	exec 3<>$TMPFILE
	dialog 	--backtitle "vncmanager"    \
		--title "$TITLE" \
		--output-fd 3 \
		--menu "On which host would you like to start the VNC server" \
		15 65 6 \
		$(awk '{ print NR " " $1 }' < $TMPHOSTFILE)

	if [ ! "$?" -eq "0" ]
	then
		rm $TMPHOSTFILE
		return 1
	fi
	exec 3>&-
	answer=$(cat $TMPFILE)
	VNCHOST=$(sed "$answer!d" $TMPHOSTFILE)
	rm $TMPHOSTFILE
}


function askres
{
	# asks for screen resolution
	> $TMPFILE
	exec 3<>$TMPFILE

	dialog  --backtitle "vncmanager" \
		--title "$TITLE"       \
		--default-item G       \
		--output-fd 3          \
		--menu "Enter the screen resolution of your desktop computer
			(computer that runs vncviewer):" 15 65 6 \
		A "800 x  600   4:3  Landscape" \
		B "1024 x  600 netbook Landscape" \
		C "1024 x  768   4:3  Landscape" \
		D "1152 x  864   4:3  Landscape" \
		E "1280 x  768  15:9  Landscape" \
		F "1280 x  800  16:10 Landscape" \
		G "1280 x 1024   5:4  Landscape" \
		H "1440 x  900  16:10 Landscape" \
		I "1400 x 1050   4:3  Landscape" \
		J "1600 x 1024  25:16 Landscape" \
		K "1680 x 1050  16:10 Landscape" \
		KR "1050 x 1680  10:16  Portrait" \
		L "1600 x 1200   4:3  Landscape" \
                M "1920 x 1080  16:9  Landscape" \
                MR "1080 x 1920  9:16  Portrait" \
		N "1920 x 1200  16:10 Landscapie" \
		O "2048 x 1152  16:9  Landscape" \
		P "2048 x 1536   4:3  Landscape" \
		Q "2560 x 1600  16:10 Landscape" \
		R "2560 x 2048   4:3  Landscape" \
	

	if [ ! "$?" -eq "0" ]
	then
		return 1
	fi
	exec 3>&-
	answer=$(cat $TMPFILE)
	case $answer in
	        A ) SCREENRES=800x600   ;;
	        B ) SCREENRES=1024x600  ;;
	        C ) SCREENRES=1024x768  ;;
	        D ) SCREENRES=1152x864  ;;
	        E ) SCREENRES=1280x768  ;;
		F ) SCREENRES=1280x800  ;;
	        G ) SCREENRES=1280x1024 ;;
	        H ) SCREENRES=1440x900  ;;
	        I ) SCREENRES=1400x1050 ;;
	        J ) SCREENRES=1600x1024 ;;
	        K ) SCREENRES=1680x1050 ;;
	        KR ) SCREENRES=1050x1680 ;;
	        L ) SCREENRES=1600x1200 ;;
		M ) SCREENRES=1920x1080 ;;
		MR ) SCREENRES=1080x1920 ;;
		N ) SCREENRES=1920x1200 ;;
	        O ) SCREENRES=2048x1152 ;;
	        P ) SCREENRES=2048x1536 ;;
	        Q ) SCREENRES=2560x1600 ;;
	        R ) SCREENRES=2560x2048 ;;
	esac
}


function askstartmenucompensation
{
	# ask to compensate vnc server display height for Windows start menu
	> $TMPFILE
	exec 3<>$TMPFILE

	dialog --backtitle "vncmanager" \
		--title "$TITLE" \
		--output-fd 3 \
		--default-item N \
		--menu "Do you want me to reduce the height of the vnc display to
				be able to see the Windows XP start menu?" 15 65 6 \
        Y  "Yes, I like my Windows start menu" \
        N  "No, thanks! Give me the full screen" \


	if [ ! "$?" -eq "0" ]
	then
		return 1
	fi

	exec 3>&-
	answer=$(cat $TMPFILE)

	# extract x and y resolution
	XRES=${SCREENRES%x*}
	YRES=${SCREENRES#*x}

	# compensation for window border and start menu
	rX=10
	rY=65
	rXRES=`expr $XRES - $rX`
	rYRES=`expr $YRES - $rY`

	case $answer in
		Y ) SCREENRES=${rXRES}x${rYRES};;
	esac
}


function askwm
{
	# ask for window manager
	> $TMPFILE
	exec 3<>$TMPFILE
	 
	dialog	--backtitle "vncmanager"    \
		--title "$TITLE" \
		--default-item 2          \
		--output-fd 3             \
		--menu "Choose a window manager:" 15 65 6 \
		1 "twm   - Tab Window Manager"   \
		2 "GNOME - GNOME desktop environment"   \
		3 "KDE   - K Desktop Environment" \
		4 "other - Use ~/.vnc/xstartup_custom script" 

	if [ ! "$?" -eq "0" ]
	then
		return 1
	fi
	
	exec 3>&-
	answer=$(cat $TMPFILE)
	
	case $answer in
		1 ) write_xstartup_twm;;
		2 ) write_xstartup_gnome;;
		3 ) write_xstartup_kde;;
		4 ) write_xstartup_custom;;
	esac
	
	return 0
}


function write_xstartup_twm
{
	cat <<'EOF' > ~/.vnc/xstartup
#!/bin/bash
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources

# go to homedirectory
cd -L

# source optenv.sh
[ -f /opt/optenv.sh ] && source /opt/optenv.sh

xsetroot -solid grey

# setting clipboard transfer 
# vncconfig -sendprimary=0 -nowin &
vncconfig -iconic -sendprimary=0 -nowin &

# start a terminal
xterm -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &

# start the desktop environment
twm &
EOF

	# make xstartup executable
	chmod +x ~/.vnc/xstartup

	# modification for TurboVNC
	cp ~/.vnc/xstartup ~/.vnc/xstartup.turbovnc
}


function write_xstartup_gnome
{
	cat <<'EOF' > ~/.vnc/xstartup
#!/bin/bash

unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS

# Prevent messed up keyboard layout
export XKL_XMODMAP_DISABLE=1

[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources

# go to homedirectory
cd -L

# source optenv.sh
[ -f /opt/optenv.sh ] && source /opt/optenv.sh

# remove ~/.config/monitors.xml if exist (this for correct -geometry option)
[ -f ~/.config/monitors.xml ] && rm -f ~/.config/monitors.xml

# setting clipboard transfer
# vncconfig -sendprimary=0 -nowin &
vncconfig -iconic -sendprimary=0 -nowin &

# start a terminal
gnome-terminal &

# start the desktop environment
exec gnome-session &
EOF

	# make xstartup executable
	chmod +x ~/.vnc/xstartup

	# modification for TurboVNC
	cp ~/.vnc/xstartup ~/.vnc/xstartup.turbovnc

}


function write_xstartup_kde
{
	cat <<'EOF' > ~/.vnc/xstartup
#!/bin/bash
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources

# go to homedirectory
cd -L

# source optenv.sh
[ -f /opt/optenv.sh ] && source /opt/optenv.sh

# setting clipboard transfer
# vncconfig -sendprimary=0 -nowin &
vncconfig -iconic -sendprimary=0 -nowin &

# start a terminal
# this somehow gives funny DCOP error messages... so no term for the moment
konsole &

# start the desktop environment
startkde &
EOF

	# make xstartup executable
	chmod +x ~/.vnc/xstartup

	# modification for TurboVNC
	cp ~/.vnc/xstartup ~/.vnc/xstartup.turbovnc

}


function write_xstartup_custom
{
	# copy custom script to xstartup
	cp ~/.vnc/xstartup_custom ~/.vnc/xstartup

	# make xstartup executable
	chmod +x ~/.vnc/xstartup

	# modification for TurboVNC
#	cp ~/.vnc/xstartup ~/.vnc/xstartup.turbovnc
}


function startserver
{
	TITLE="step 1 of 4"
	askhost

	[ "$?" -eq "1" ] && return 0

	TITLE="step 2 of 4"
	askres
	[ "$?" -eq "1" ] && return 0

	TITLE="step 3 of 4"
	askstartmenucompensation
	[ "$?" -eq "1" ] && return 0

	TITLE="step 4 of 4"
	askwm
	[ "$?" -eq "1" ] && return 0

	# check if a vncpasswd is set (when vncserver invokes the vncpasswd
	# script, the password is world readable)
	if [ ! -f ~/.vnc/passwd ]
	then
		setpw
		[ "$?" -eq "1" ] && return 0
	fi
	
	# show waiting message
	dialog 	--backtitle "vncmanager" \
		--title "wait..." \
		--infobox "Starting a VNC server on $VNCHOST" 15 65

	# start vnc server
	#echo ${HOSTNAME%%.*}
	if ( $VALIDTORQUE ) ; then
		# host is torque execution node in queue vgl and has
		# property vgl. Start vnc-server on local system....

		PATH=$PATH:/usr/X11R6/bin; vncserver -geometry $SCREENRES
		if [ ! "$?" -eq "0" ] ; then
			# vncserver failed to start
			MELDING="something went wrong. Maybe no more displays are available. Try another mentat system."
                	novalidtorquevnc
		fi
		ps hu -C Xvnc | grep $USER | awk '{ print hostname $12 }' hostname=$HOSTNAME | sort > $THISHOST
		dialog 	--backtitle "vncmanager" \
			--title "VNC session running" \
			--msgbox "$(echo 'VNC session(s) running on this torque execution host.

You can use your favorite vnc-viewer (recommended are Tiger-vncviewer or Turbo-vncviewer) to connect to:'; cat $THISHOST)" 15 65
	else
		# host is a classic mentat system. First ssh to this system
		# and then start the vncserver over there....

		ssh $VNCHOST \
		"PATH=$PATH:/usr/X11R6/bin; vncserver -geometry $SCREENRES"
		if [ ! "$?" -eq "0" ] ; then
			# vncserver failed to start
			MELDING="something went wrong. Maybe no more displays are available. Try another mentat system."
                	novalidtorquevnc
		fi
	fi

	# show list of running vnc servers
	vncinfodialog
}


function setpw
{
	# show instruction message
	dialog 	--backtitle "vncmanager" \
		--title "vnc password" \
		--msgbox "You will be asked to enter a password. You'll need this password when connecting with VNC viewer" 15 65

	# set the password
	vncpasswd
	
	# check if all went fine
	if [ ! "$?" -eq "0" ]
	then
		# show error message
		dialog 	--backtitle "vncmanager" \
			--title "vnc password" \
			--msgbox "Setting the password failed." 15 65
		return 1
	fi
	return 0
}


function collaborate
{
	# share your vnc session by temporary change the password

	# ask for confirmation
	> $TMPFILE
	exec 3<>$TMPFILE
	dialog  --backtitle "vncmanager" \
		--title "collaborate" \
		--defaultno   \
		--output-fd 3 \
		--yesno "The Collaborate option temporarily changes your VNC password to 'helpme'. Giving your colleage oportunity connect to your VNC desktop. After 30 seconds, your VNC password is restored. Once your colleage is 'in', he or she can continue working with the VNC session until you select the Disconnect option from the main menu.\n\nAre you sure you want to do this?" 14 60

	# test if user answered 'Yes'
	if [ "$?" -eq "0" ]
	then
		sharevnc
	fi

	return 0
}
                

function sharevnc
{
	# backup password
	mv ~/.vnc/passwd ~/.vnc/oldpasswd

	# make sure the password is restored when the program exits
	trap 'if [ -f ~/.vnc/oldpasswd ]; then mv ~/.vnc/oldpasswd ~/.vnc/passwd; echo vnc password restored...; fi' EXIT

	# write temporary password 'helpme'
	# note: octal codes determined with "cat ~/.vnc/passwd | hexdump -b"
	for OCTALBYTE in 145 151 142 201 056 243 032 130
	do
	        /bin/echo -n -e \\$OCTALBYTE
	done > ~/.vnc/passwd


	# wait and show a gauge dialog before we restore the original password
	COUNT=0
	(
	while test $COUNT != 30
	do
	        echo `expr 100 \* $COUNT / 30`
	        echo "XXX"
	        echo "Please instruct your colleague to connect to one of your VNC servers. He or she should use the password 'helpme' to get in. This only works as long as you see this dialog. If he or she is to late? Just try again!"
	        echo "XXX"
	        COUNT=`expr $COUNT + 1`
	        sleep 1
	done
	) | dialog --backtitle "vncmanager" \
			--title "collaborate" \
			--gauge "this is some text" 10 70 0

	# restore password
	mv ~/.vnc/oldpasswd ~/.vnc/passwd
	echo vnc password restored...
	return 0
}



function help
{
	dialog 	--backtitle "vncmanager" \
		--title "help" \
		--msgbox "For more information about using vnc, consult intranet page http://intranet/cms/vnc.html. If you don't like to supply your linux password when starting or stopping a vnc server, consult intranet page http://intranet/cms/ssh_without_password.html to exchange ssh keys.
If you instantly like to change your (vnc) screen resolution you can find help at intranet page https://intranet.donders.ru.nl/index.php?id=faq#c21178" 15 65
}


function someinitialchecks
{
	# create ~/.vnc if it doesn't exist yet
	[ ! -d ~/.vnc ] && mkdir ~/.vnc

	if [ ! -f ~/.vnc/xstartup_managed_by_vncmanager ]
	then
		# make backup of ~/.vnc if vncmanager runs for the first time
		cp -r ~/.vnc ~/.vnc.old
		cat <<EOF > ~/.vnc.old/README
This is a backup of your vnc settings. It has been made the
first time you ran 'vncmanager'.

If you didn't experience problems using VNC with the vncmanager,
you can simply delete this directory (freeing up some kb's)
EOF
		if [ ! -f ~/.vnc/xstartup ]
		then
			# write default xstartup script
			write_xstartup_gnome
		fi

		# copy existing xstartup script to xstartup_customx
		cp ~/.vnc/xstartup ~/.vnc/xstartup_custom

		# leave a mark, so that this code is only executed once
		touch ~/.vnc/xstartup_managed_by_vncmanager
	fi
}


function mainmenu
{
	# shows the main menu
	> $TMPFILE
	exec 3<>$TMPFILE
	 
	dialog	--backtitle "vncmanager"    \
		--title "main menu"  \
		--output-fd 3             \
		--menu "What would you like to do:" 15 65 9 \
		1 "List my running VNC servers"   \
		2 "Start a (VirtualGL) VNC server"   \
		3 "Stop a VNC server"  \
		4 "Set my VNC password" \
		5 "Collaborate" \
		6 "Disconnect" \
		7 "Help" \
		8 "Quit"

	[ ! "$?" -eq "0" ] && quit
	
	exec 3>&-
	answer=$(cat $TMPFILE)
	
	case $answer in
		1) vncinfodialog;;
		2) startserver;;
		3) killfromlist;;
		4) setpw;;
		5) collaborate;;
		6) disconnectfromlist;;
		7) help;;
		8) quit;;
	esac
}

## check if module command is available
## It is an indication if we need to source setup script for env. module
module list > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo 'sourcing setup'
    mydir=`get_script_dir $0`
    source $mydir/../../_modules/setup.sh
    module load cluster
fi

TMPFILE=`mktemp`
VNCINFO=`mktemp`
THISHOST=`mktemp`

someinitialchecks
chktorque

# main program
while true
do
	# run the main menu
	mainmenu
done

exit 0
